@model Exposure.Entities.JobApplication
@{
    ViewBag.Title = "Job Application";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    if (User.IsInRole("Worker"))
    {
        <h4>Job Application Edit</h4>
        <hr />
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.JobApplicationID)
            <div class="form-group">
                @Html.LabelFor(model => model.JobID, "Job:", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Title)
                    @Html.ValidationMessageFor(model => model.JobID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Job.Employer.EmployerID, "Employer", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(Model => Model.Job.Employer.ApplicationUser.FirstName) &nbsp; @Html.DisplayFor(Model => Model.Job.Employer.ApplicationUser.LastName)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Motivation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Motivation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Motivation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Update" class="btn btn-default" />
                </div>
            </div>
        </div>

    }
    else if (User.IsInRole("Employer"))
    {
        if (TempData["Replied"] != null)
        {
            <div class="alert alert-danger alert-dismissable" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @TempData["Replied"]. <a href="@Url.Action("Index", "JobApplications")">Click here</a> to return to job list.
            </div>
            
        }
        <h4>Job Application Response</h4>
        <hr />
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.JobApplicationID, "JobAppID")
            @Html.HiddenFor(model => model.JobID)
            @Html.HiddenFor(model=>model.Motivation)
            @Html.HiddenFor(model=>model.ApplicationDate)
            @Html.HiddenFor(model=>model.WorkerID)
            <div class="form-group">
                @Html.LabelFor(model => model.JobID, "Job", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Title)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.WorkerID, "Worker", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Worker.ApplicationUser.FirstName) &nbsp; @Html.DisplayFor(model => model.Worker.ApplicationUser.LastName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Motivation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Motivation, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            @if (TempData["Replied"] != null)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Response, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(model => model.Response, new { htmlAttributes= new { @class = "form-control ReadOnly" } })
                        
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Response, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Response, htmlAttributes: new { @class = "form-control @RO" })
                        @Html.ValidationMessageFor(model => model.Response, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Reply" class="btn btn-default" @(TempData["Replied"] != null ? "disabled='disabled'" : "") />
                </div>
            </div>
        </div>
    }

}
<div>
    <a href="@Url.Action("Index","Manage")">Back to Profile</a>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
