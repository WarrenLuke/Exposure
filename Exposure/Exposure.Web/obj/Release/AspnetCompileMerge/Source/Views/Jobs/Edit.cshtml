@model Exposure.Entities.Job
@using Exposure.Web.Models;
@{
    ViewBag.Title = "Edit Job";
}
<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{

    @Html.AntiForgeryToken()
    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.Title)
            @Html.HiddenFor(model => model.JobID, "JobID")
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SkillID, "Skill", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Skill.SkillDescription)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control datepicker", @id = "sDate" })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control datepicker", @id = "eDate" })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.StartTime, new { @class = "form-control timepicker", @id = "sTime" })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.EndTime, new { @class = "form-control timepicker", @id = "eTime" })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SuburbID, "Suburb", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("SuburbID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SuburbID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}



<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $("#end").val(@ViewBag.EndDate)
            $("#start").val(@ViewBag.StartDate)

        });

        var mDay = @Html.Raw(Json.Encode(ViewBag.minDay));
        var mYear = @Html.Raw(Json.Encode(ViewBag.minYear));
        var mMonth = @Html.Raw(Json.Encode(ViewBag.minMonth));

        var eDay = @Html.Raw(Json.Encode(ViewBag.eDay));
        var eYear = @Html.Raw(Json.Encode(ViewBag.eYear));
        var eMonth = @Html.Raw(Json.Encode(ViewBag.eMonth));

        var sDay = @Html.Raw(Json.Encode(ViewBag.sDay));
        var sYear = @Html.Raw(Json.Encode(ViewBag.sYear));
        var sMonth = @Html.Raw(Json.Encode(ViewBag.sMonth));

        $(function () {
            
            $("#sDate").datepicker({
                numberOfMonths: 1,
                minYear: mYear,
                minDate: new Date(mYear, mMonth - 1, mDay),
                defaultDate: new Date(sYear, sMonth - 1, sDay),
                onSelect: function (selected) {
                    $("#eDate").datepicker("option", "minDate", selected)
                }
            })

            $("#eDate").datepicker({
                numberOfMonths: 1,
                defaultDate: new Date(eYear, eMonth - 1, eDay),
                onSelect: function (selected) {
                    $("#sDate").datepicker("option", "maxDate", selected)
                }
            })
        });
       

        var endTime = @Html.Raw(Json.Encode(ViewBag.endTime));
        var startTime =@Html.Raw(Json.Encode(ViewBag.startTime));
            $(function () {

                $("#sTime").timepicker({
                    timeFormat: 'HH:mm p',
                    minTime: '8:00am',
                    maxTime: '12:00pm',
                    defaultTime: startTime,
                    dropdown: true,
                    scrollbar: true,
                    change: function (selected) {
                        $("#eTime").timepicker("option", "minTime", selected)
                    }
                })

                $("#eTime").timepicker({
                    durationTime: true,
                    timeFormat: 'HH:mm p',
                    maxTime: '4:00pm',
                    defaultTime: endTime,
                    dropdown: true,
                    scrollbar: true
                })
            });


    </script>
}
