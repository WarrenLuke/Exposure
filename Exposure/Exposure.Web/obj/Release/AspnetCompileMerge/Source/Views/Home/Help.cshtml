@model Exposure.Entities.Help
<style>

    dl.faq button {
        margin: 0;
        padding: 0;
        margin-top: 1em;
        border: thin solid transparent;
        padding-left: 0.125em;
    }

    dl dd {
        margin: 0;
        padding: 0;
        margin-left: 1.5em;
        color: black;
    }

    dl.faq .desc {
        margin: 0;
        padding: 0.5em;
        font-size: 110%;
        display: none;
        background-color: #f6b991;
    }

    dl.faq button:hover,
    dl.faq button:focus {
        background-color: #bbb;
    }

    dl.faq button:focus {
        border-color: gray;
    }

    dl.faq button:hover {
        text-decoration: underline;
    }

    dl.faq button:active {
        background-color: #bbb;
    }

    dl.faq button[aria-expanded="false"]:before {
        content: url('../images/right-arrow-brown.png');
        padding-right: 0.35em;
    }

    dl.faq button[aria-expanded="true"]:before {
        content: url('../images/down-arrow-brown.png');
        padding-right: 0.35em;
    }
</style>

<div class="row">
    <div class="col-md-8">
        <h3>FAQs</h3>
        <p>Below is a list of frequently asked questions you might find useful.</p>
        <br />
        <dl class="faq">
            @foreach (var item in ViewBag.FAQ)
            {
                <dt>
                    <button aria-expanded="false" aria-controls="faq2_desc">
                        @item.HelpQuestion
                    </button>
                </dt>
                <dd>
                    <p id="faq2_desc" class="desc">
                        @item.HelpAnswer
                    </p>
                </dd>
            }
        </dl>       
    </div>    
    <div class="col-md-4"><img src="~/images/FAQ.jfif" alt="FAQ" width="300" height="300"></div>
</div>

<script>

    var ButtonExpand = function (domNode) {

        this.domNode = domNode;

        this.keyCode = Object.freeze({
            'RETURN': 13
        });
    };

    ButtonExpand.prototype.init = function () {

        this.controlledNode = false;

        var id = this.domNode.getAttribute('aria-controls');

        if (id) {
            this.controlledNode = document.getElementById(id);
        }

        this.domNode.setAttribute('aria-expanded', 'false');
        this.hideContent();

        this.domNode.addEventListener('keydown', this.handleKeydown.bind(this));
        this.domNode.addEventListener('click', this.handleClick.bind(this));
        this.domNode.addEventListener('focus', this.handleFocus.bind(this));
        this.domNode.addEventListener('blur', this.handleBlur.bind(this));

    };

    ButtonExpand.prototype.showContent = function () {

        if (this.controlledNode) {
            this.controlledNode.style.display = 'block';
        }

    };

    ButtonExpand.prototype.hideContent = function () {

        if (this.controlledNode) {
            this.controlledNode.style.display = 'none';
        }

    };

    ButtonExpand.prototype.toggleExpand = function () {

        if (this.domNode.getAttribute('aria-expanded') === 'true') {
            this.domNode.setAttribute('aria-expanded', 'false');
            this.hideContent();
        }
        else {
            this.domNode.setAttribute('aria-expanded', 'true');
            this.showContent();
        }

    };

    /* EVENT HANDLERS */

    ButtonExpand.prototype.handleKeydown = function (event) {

        console.log('[keydown]');

        switch (event.keyCode) {

            case this.keyCode.RETURN:

                this.toggleExpand();

                event.stopPropagation();
                event.preventDefault();
                break;

            default:
                break;
        }

    };

    ButtonExpand.prototype.handleClick = function (event) {
        this.toggleExpand();
    };

    ButtonExpand.prototype.handleFocus = function (event) {
        this.domNode.classList.add('focus');
    };

    ButtonExpand.prototype.handleBlur = function (event) {
        this.domNode.classList.remove('focus');
    };

    /* Initialize Hide/Show Buttons */

    window.addEventListener('load', function (event) {

        var buttons = document.querySelectorAll('button[aria-expanded][aria-controls]');

        for (var i = 0; i < buttons.length; i++) {
            var be = new ButtonExpand(buttons[i]);
            be.init();
        }

    }, false);
</script>